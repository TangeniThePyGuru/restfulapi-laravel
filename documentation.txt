files:
    add domain to config file /etc/hosts
    php vendor/bin/homestead make
    vagrant init

commands:
    php vendor/bin/homestead make -> prepare and configure homestead on linux
	vendor\\bin\\homestead make -> on windows
    vagrant up -> boot up your vagrant virtual machine
    vagrant halt -> switch of the virtual machine
    vagrant destroy -> destroys the virtual machine
    vagrant ssh -> opens the vagrant virtual machine
    vagrant exit -> exits the vagrant virtual machine

problems encountered:
    don't use x.dev it does not work, but use x.test
    Dotenv values containing spaces must be surrounded by quotes.
    fractal automatically includes a data attribute on the jsonResponse
    when a change has been made to the .env file one needs to run the command php artisan clear:cache

    ----------

API Routes
    Go to RouteServiceProvider
    Go to method mapApiRoutes() -> remove the prefix method

Laravel 5.4 >
    always include
        Schema::defaultStringLength(191) method inside the AppServiceProvider boot() method

Info
    A string has 255 characters by default

Creating pivot tables
    php artisan make:migration category_product_table --create=category_product

Executing seeders
     Call to a member function attach() on null
        - needed to add the return keyword

Exception handling
     - under the Exceptions folder we find a Handler Class
     - with method render()
        - executed every time an exception occurs
     - method report()
        - executed every time but only to report to the log file
  NotFoundHttpException
  MethodNotAllowedHttpException
  ModelNotFoundException
  AuthenticationException
  AuthorizationException

Implicit Model Binding
     - not using the $id but the Model Class
     - does not apply to all models - in case of special models like the buyer
       we can create a scope to help us add filters to our model.
Scopes
     - Used for filtering a model that inherits from another model

Soft Deletes
     - Helps solve issues with foreign keys


AppServiceProvider
     - Events to be done in this file using the updated method in the model.

Uploading and Storing an Image
     - configure the fileSystem - 'images' => [
                                              'driver' => 'local',
                                              'root' => public_path('img'),
                                              'visibility' => 'public',
                                          ],
     - $request->image->store()

Email  Sending
     - composer require guzzlehttp/guzzle

User Verification
     - change the verified status to verified and remove the verification_token

Mailer
     - php artisan make:mail UserCreated
     - the build method is automatically created
     - to pass the user details to the view file, pass the user through the constructor
       and they will be automatically passed to the view

EventsFlushing
     - Events can be disabled using the Model::flushEventListeners();
     - This should be run before executing the create method of a model

Dealing with Failing-Prone Actions
     - surround your Mail sending action with the retry('times to retry', function() use Model{ 'actions' }, 'milliseconds to retry again (100)') helper

Using Laravel Markdown Mailables
     - php artisan make:mail Test -m emails.test
     - creates for us a Mailable class and a corresponding view
     - available from Laravel 5.4*

Middleware
     - only the named middleware can receive attributes
     - php artisan make SignatureMiddleware
     - SignatureMiddleware is an after middleware
     - name the middleware, add it to the web and api middleware and pass it the parameter
     - after and before middleware
     - right limiting middleware is called throttle request

Transformers
     - used to change attribute names without dealing with the database
     - fractal
     - composer require spatie/laravel-fractal
     - config/app.php Providers = [
         ....
         Spatie\Fractal\FractalServiceProvider::class,
     ]
     - linking a model to it's transformer
     - Add attribute
            public $transformer = ModelTransformer::class;
     - create a protected function transformData($data, $transformer) in the ApiResponser
     - use this methods in the showOne() and showAll() methods

Sorting the api request
     - create a softData(Collection) method that sorts the collection
     - pass the collection in the showAll() through this method and it will return a sorted collection which will be retrieved as sorted.
     - parameters can be passed for sorting and querying specific data by passing the "attribute name" = X
   issues
     - one can only sort using the original names of attributes
   solution
     - create method that maps the original attribute names to the transformed attribute names so that the client can use the names they see.

Pagination
    - refer to the paginate method in the api response
    - parameters can be passed into the url 'per_page' can be used to overwrite the size of the
    - as well as other parameters such as 'sort_by'

HATEOAS
    - refer to the transformer classes for more clarity on how HateOAS work

transformedAttribute() method
    - method created to enable the vise versa transformation of attribute names
    - public function __construct()
          {
              parent::__construct();

              $this->middleware('transform.input:'. UserTransformer::class)->only(['store', 'update']);
          }
    - the above constructor has been added to all the controllers where validation is required especially if there is a store and update method
      and it requires validation

Auth Routes
    - Navigate to The Router Class under illuminate
    - copy everything the auth() method into your web routes files

Laravel Passport
    - for laravel version lower than 5.6
    - composer require laravel/passport:~4.0
    - run php artisan migrate to create tables
    - run php artisan passport:install to generate passport tokens
    - go to user model add HasApiToken trait
    - register the required routes in the AuthServiceProvider
        public function boot()
            {
                .
                .
                Passport::routes();
            }
    - Route::post('oauth/token', '\Laravel\Passport\Http\Controllers\AccessTokenController@issueToken')
    - go to config auth guards => [

        driver => 'passport'

      ]

    - Add name middleware
        'client.credentials' => \Laravel\Passport\Http\Middleware\CheckClientCredentials::class, add to the middleware kernel
    - apply this middleware to resource controllers __construct()
        $this->middleware('client.credentials')->only(['index', 'show']);

Getting the token
    - creating clients
        php artisan passport:client

    - send the below parameter  to the route http://restfulapi.test/oauth/token with POST method
      grant_type:client_credentials
      client_id:3
      client_secret:xIEsftPl0BmZdf8sFCBK3AfVwoF7ym5tyqwxBV6g

    - use the retained token and pass it through as you request for data
      pass it into this field Authorization Bearer xxxxxtokenxxxxx

Fixing Time Differences with Windows and Linux
    - Make Linux use 'Local' time
      To tell your Ubuntu system that the hardware clock is set to 'local' time:

      Pre-Ubuntu 15.04 systems (e.g. Ubuntu 14.04 LTS):
      edit /etc/default/rcS
      add or change the following section
      # Set UTC=yes if your hardware clock is set to UTC (GMT)
      UTC=no
      Ubuntu 15.04 systems and above (e.g. Ubuntu 16.04 LTS):
      open a terminal and execute the following command:
      timedatectl set-local-rtc 1

    - Alternativly follow the URL - https://help.ubuntu.com/community/UbuntuTime

 Fixing the key OAUTH file not found
    - ssh into the machine and run:
      php artisan passport:install

 Publishing the passport components
    - php artisan vendor:publish --tag=passport-components

    - install packages not from the VM but on your PC

 Compiling our front-end files
    - npm run dev - compiles once
    - npm run watch - compiles every time a file is changed

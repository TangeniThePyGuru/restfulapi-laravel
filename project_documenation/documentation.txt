http status code:
    https://en.wikipedia.org/wiki/List_of_HTTP_status_codes

files:
    add domain to config file /etc/hosts
    php vendor/bin/homestead make
    vagrant init

commands:
    php vendor/bin/homestead make -> prepare and configure homestead on linux
	vendor\\bin\\homestead make -> on windows
    vagrant up -> boot up your vagrant virtual machine
    vagrant halt -> switch of the virtual machine
    vagrant destroy -> destroys the virtual machine
    vagrant ssh -> opens the vagrant virtual machine
    vagrant exit -> exits the vagrant virtual machine

problems encountered:
    don't use x.dev it does not work, but use x.test
    Dotenv values containing spaces must be surrounded by quotes.
    fractal automatically includes a data attribute on the jsonResponse
    when a change has been made to the .env file one needs to run the command php artisan clear:cache

    ----------

API Routes
    Go to RouteServiceProvider
    Go to method mapApiRoutes() -> remove the prefix method

Laravel 5.4 >
    always include
        Schema::defaultStringLength(191) method inside the AppServiceProvider boot() method

Info
    A string has 255 characters by default

Creating pivot tables
    php artisan make:migration category_product_table --create=category_product

Executing seeders
     Call to a member function attach() on null
        - needed to add the return keyword

Exception handling
     - under the Exceptions folder we find a Handler Class
     - with method render()
        - executed every time an exception occurs
     - method report()
        - executed every time but only to report to the log file
  NotFoundHttpException
  MethodNotAllowedHttpException
  ModelNotFoundException
  AuthenticationException
  AuthorizationException

Implicit Model Binding
     - not using the $id but the Model Class
     - does not apply to all models - in case of special models like the buyer
       we can create a scope to help us add filters to our model.
Scopes
     - Used for filtering a model that inherits from another model

Soft Deletes
     - Helps solve issues with foreign keys


AppServiceProvider
     - Events to be done in this file using the updated method in the model.

Uploading and Storing an Image
     - configure the fileSystem - 'images' => [
                                              'driver' => 'local',
                                              'root' => public_path('img'),
                                              'visibility' => 'public',
                                          ],
     - $request->image->store()

Email  Sending
     - composer require guzzlehttp/guzzle

User Verification
     - change the verified status to verified and remove the verification_token

Mailer
     - php artisan make:mail UserCreated
     - the build method is automatically created
     - to pass the user details to the view file, pass the user through the constructor
       and they will be automatically passed to the view

EventsFlushing
     - Events can be disabled using the Model::flushEventListeners();
     - This should be run before executing the create method of a model

Dealing with Failing-Prone Actions
     - surround your Mail sending action with the retry('times to retry', function() use Model{ 'actions' }, 'milliseconds to retry again (100)') helper

Using Laravel Markdown Mailables
     - php artisan make:mail Test -m emails.test
     - creates for us a Mailable class and a corresponding view
     - available from Laravel 5.4*

Middleware
     - only the named middleware can receive attributes
     - php artisan make SignatureMiddleware
     - SignatureMiddleware is an after middleware
     - name the middleware, add it to the web and api middleware and pass it the parameter
     - after and before middleware
     - right limiting middleware is called throttle request

Transformers
     - used to change attribute names without dealing with the database
     - fractal
     - composer require spatie/laravel-fractal
     - config/app.php Providers = [
         ....
         Spatie\Fractal\FractalServiceProvider::class,
     ]
     - linking a model to it's transformer
     - Add attribute
            public $transformer = ModelTransformer::class;
     - create a protected function transformData($data, $transformer) in the ApiResponser
     - use this methods in the showOne() and showAll() methods

Sorting the api request
     - create a softData(Collection) method that sorts the collection
     - pass the collection in the showAll() through this method and it will return a sorted collection which will be retrieved as sorted.
     - parameters can be passed for sorting and querying specific data by passing the "attribute name" = X
   issues
     - one can only sort using the original names of attributes
   solution
     - create method that maps the original attribute names to the transformed attribute names so that the client can use the names they see.

Pagination
    - refer to the paginate method in the api response
    - parameters can be passed into the url 'per_page' can be used to overwrite the size of the
    - as well as other parameters such as 'sort_by'

HATEOAS
    - refer to the transformer classes for more clarity on how HateOAS work

transformedAttribute() method
    - method created to enable the vise versa transformation of attribute names
    - public function __construct()
          {
              parent::__construct();

              $this->middleware('transform.input:'. UserTransformer::class)->only(['store', 'update']);
          }
    - the above constructor has been added to all the controllers where validation is required especially if there is a store and update method
      and it requires validation

Auth Routes
    - Navigate to The Router Class under illuminate
    - copy everything the auth() method into your web routes files

Laravel Passport
    - for laravel version lower than 5.6
    - composer require laravel/passport:~4.0
    - run php artisan migrate to create tables
    - run php artisan passport:install to generate passport tokens
    - go to user model add HasApiToken trait
    - register the required routes in the AuthServiceProvider
        public function boot()
            {
                .
                .
                Passport::routes();
            }
    - Route::post('oauth/token', '\Laravel\Passport\Http\Controllers\AccessTokenController@issueToken')
    - go to config auth guards => [

        driver => 'passport'

      ]

    - Add name middleware
        'client.credentials' => \Laravel\Passport\Http\Middleware\CheckClientCredentials::class, add to the middleware kernel
    - apply this middleware to resource controllers __construct()
        $this->middleware('client.credentials')->only(['index', 'show']);

Getting the token
    - creating clients
        php artisan passport:client

    - send the below parameter  to the route http://restfulapi.test/oauth/token with POST method
      grant_type:client_credentials
      client_id:3
      client_secret:xIEsftPl0BmZdf8sFCBK3AfVwoF7ym5tyqwxBV6g

    - use the retained token and pass it through as you request for data
      pass it into this field Authorization Bearer xxxxxtokenxxxxx

Fixing Time Differences with Windows and Linux
    - Make Linux use 'Local' time
      To tell your Ubuntu system that the hardware clock is set to 'local' time:

      Pre-Ubuntu 15.04 systems (e.g. Ubuntu 14.04 LTS):
      edit /etc/default/rcS
      add or change the following section
      # Set UTC=yes if your hardware clock is set to UTC (GMT)
      UTC=no
      Ubuntu 15.04 systems and above (e.g. Ubuntu 16.04 LTS):
      open a terminal and execute the following command:
      timedatectl set-local-rtc 1

    - Alternativly follow the URL - https://help.ubuntu.com/community/UbuntuTime

 Fixing the key OAUTH file not found
    - ssh into the machine and run:
      php artisan passport:install

 Publishing the passport components
    - php artisan vendor:publish --tag=passport-components

    - install packages not from the VM but on your PC

 Compiling our front-end files
    - npm run dev - compiles once
    - npm run watch - compiles every time a file is changed

 Authorization Code Grant Type
    - create a client and use the client id
    - https://restfulapi.test/oauth/authorize?client_id=3&redirect_url=http://localhost&response_type=code
 Requesting an access Token
    - http://restfulapi.test/oauth/token
    - pass the following fields into the above url
        client_id:3
        client_secret:wxDJ9XqZI0oC7CbbnAqJdjXZzLSbXsZ4Nk5DpStp
        redirect_url:http://localhost
        code:def50200cb163dc9bda10ea95fe835e4cc76133b3a8b900f5f5ac8c88081613c6626f2cb92399a9e4818552fd64ee39401ff84727dd17ae661da17f247017ebbe48f7ae50827e3ef2976a71fe465bada046d4306a68a4f20d56c6c502f5e4095ed12f4414e8d05cb9436c4bcec4d08ccbfa4dad7cd3289fcf77478e48e03827fa4993a9a2b126c767c591f4308ee83392cb7b22197da8cfac7aa5c4e9cd2a1678ecd3b14fbc03b88e25ba2b03185f7840981776bc54d4816c2067f8277c3badea11bd7a5b6d2e36244c717c6d215fbc58bd0d456eb89a230fbe84bbb0ef549e9cdd098d72d5ea0e8831bc87c1588aeb969eeb9707b61493c341a31c0ae0f1f75d4845772eb6504ff77390ff72862184de330da0279576dcdfa889211b4f1a8f8489a7d26105ba1cbfa9612ec76a857c47914f6edc559069dbfdcc79301d626898f
        grant_type:authorization_code
     - check the image named_requesting_an_access_token.PNG in the project_documentation folder

    - The following json object is returned with an access token
    {
          "token_type": "Bearer",
          "expires_in": 1800,
          "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjExOWM1Njg4ZjhmZDc1YTZkYmQ0OTk5MjhhYjZkOGMxNDhkMjIzOGI2NjQ0NDJkNDgzZjNjZTY1YTczMWIxZDMzMzJiMTkwOWNhZmRjMGYzIn0.eyJhdWQiOiIzIiwianRpIjoiMTE5YzU2ODhmOGZkNzVhNmRiZDQ5OTkyOGFiNmQ4YzE0OGQyMjM4YjY2NDQ0MmQ0ODNmM2NlNjVhNzMxYjFkMzMzMmIxOTA5Y2FmZGMwZjMiLCJpYXQiOjE1MjU3MDI4ODYsIm5iZiI6MTUyNTcwMjg4NiwiZXhwIjoxNTI1NzA0Njg2LCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.VX5RI9JnanQfEpYnz2ctQSy0yuYWX_GHNPzQrP0imIpdpNROjshril70GCtymCGYPAK1CTaAe0mnjAyLZkE6vKpNyg8P1IA_o125VZbFbyJXGYbKgTax5gPgaCyu-cju9utpyZjy8kBW0i0LkZlACHMv87mLX3hXS9nOIF6uC8Ze3B7YwG1X4b9hc9Ray1QVuCf9g7S2BzBiBN8qOIbGZCIGQBYKqZlxzPHbC2IlsKjGW5OXqjpIx_9O4SoTUJTVSa_94CYavYjH2sHVMeKX1E6uHOHnY0v_fkJwP5NrbMxVWphp2wlpiQR1l3t7Ntz5xx0F-TqS-6yvulPJou41IS10IUw9CnS-cizSalJgUTZn1MKO8krcJ5ytKl8UA9LgGAJU3R1tWGM7kQ3W-3dDxUyhl_VebQ31AMDgi18TW1NL9n0DZKJncx-v_7wKcNAzuJWEd6sPqI2j60oYcLzBJm2pbiAUm5YANXg9YgbyitzwfzCTQHki9aGtplkHTWOy4Aabr3NQ0NPk9Hzfaj46hGuC3qcmguNXmcfcygvxwR8qp6DKCyfO5wh0XKnpLNjFhFAS3mI6NQUOQCUEzHcEdCZwppbpfi1przh16IjO0OFaFmkXZdHB1CPYMNxZDy6XlyvZEB9kMpJXIZBtPc2aiKJrkZmRbB52Bynpij3eV6I",
          "refresh_token": "def50200fd4fa6a753fb8a9b9388a23df468b4ffff473ecf31c6bb6655769b704c02fdfb37d7929dac813e8efcdb29a0cf1a64aea29a27bd83db948897ac5171922f99cb886b37d61bf44e28cbc64d2ef0360aec5f4cb6875b36db4a1c354d79c04d8328e2abaa60cc5abb723b742716017cd5f0ac5225fcb093fd7e5ba5cacb084acf1f012d1982256d6d566148cb858f140f7bc9b49f0a02c658caf9eaf941c7105a05b13efc2a978bdb1d41e489fb5adccfd9e07302c2b27fece36a297054d4566158a2076649b19a3770b66468b8188ca7fbe3831cc6b053be56c9bb896c71841533b7aa7367deae6ff1efdcf0d5c782e3fb4aa1f99871ee2e3aaf275ad774ab854920a060c1ddef9e8d5fb6dcfb885872738986dee0e23ecd6dc578038554e6682165f993260c47e0e40c0eba8c87886569209d8cbda597a8ac4cf9e1222fe4eac6c20af43f272c634967b88c8c6bd9f0896be6fc879bca02a1969a07d435"
      }

Requesting data with the access token
    - the above retrieved access token can be used to access / request the data in the following manner
    - pass the following field into the URL used to request data
    Authorization:Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjExOWM1Njg4ZjhmZDc1YTZkYmQ0OTk5MjhhYjZkOGMxNDhkMjIzOGI2NjQ0NDJkNDgzZjNjZTY1YTczMWIxZDMzMzJiMTkwOWNhZmRjMGYzIn0.eyJhdWQiOiIzIiwianRpIjoiMTE5YzU2ODhmOGZkNzVhNmRiZDQ5OTkyOGFiNmQ4YzE0OGQyMjM4YjY2NDQ0MmQ0ODNmM2NlNjVhNzMxYjFkMzMzMmIxOTA5Y2FmZGMwZjMiLCJpYXQiOjE1MjU3MDI4ODYsIm5iZiI6MTUyNTcwMjg4NiwiZXhwIjoxNTI1NzA0Njg2LCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.VX5RI9JnanQfEpYnz2ctQSy0yuYWX_GHNPzQrP0imIpdpNROjshril70GCtymCGYPAK1CTaAe0mnjAyLZkE6vKpNyg8P1IA_o125VZbFbyJXGYbKgTax5gPgaCyu-cju9utpyZjy8kBW0i0LkZlACHMv87mLX3hXS9nOIF6uC8Ze3B7YwG1X4b9hc9Ray1QVuCf9g7S2BzBiBN8qOIbGZCIGQBYKqZlxzPHbC2IlsKjGW5OXqjpIx_9O4SoTUJTVSa_94CYavYjH2sHVMeKX1E6uHOHnY0v_fkJwP5NrbMxVWphp2wlpiQR1l3t7Ntz5xx0F-TqS-6yvulPJou41IS10IUw9CnS-cizSalJgUTZn1MKO8krcJ5ytKl8UA9LgGAJU3R1tWGM7kQ3W-3dDxUyhl_VebQ31AMDgi18TW1NL9n0DZKJncx-v_7wKcNAzuJWEd6sPqI2j60oYcLzBJm2pbiAUm5YANXg9YgbyitzwfzCTQHki9aGtplkHTWOy4Aabr3NQ0NPk9Hzfaj46hGuC3qcmguNXmcfcygvxwR8qp6DKCyfO5wh0XKnpLNjFhFAS3mI6NQUOQCUEzHcEdCZwppbpfi1przh16IjO0OFaFmkXZdHB1CPYMNxZDy6XlyvZEB9kMpJXIZBtPc2aiKJrkZmRbB52Bynpij3eV6I
    - check the image named requesting_data_with_an_access_token.PNG in the project_documentation folder

Implicit Grant Type
    - How to added it:
        - Go to the AuthServiceProvider
        - Add Passport::enableExplicitGrant(); to boot method
    - Test it: http://restfulapi.test/oauth/authorize?client_id=3&redirect_url=http://localhost&response_type=token
    - returns redirect url: https://localhost/#access_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjZlNWJlYjE1MWUyMWMzM2MwMjc5YzhhNzAzMWI0OWZhMDEzY2VmMzNkNTkwYzYzMmQ3OTk5NGJmYmNhMTA0ODkwOTFiYTQzN2I4ZmUwMWRmIn0.eyJhdWQiOiIzIiwianRpIjoiNmU1YmViMTUxZTIxYzMzYzAyNzljOGE3MDMxYjQ5ZmEwMTNjZWYzM2Q1OTBjNjMyZDc5OTk0YmZiY2ExMDQ4OTA5MWJhNDM3YjhmZTAxZGYiLCJpYXQiOjE1MjU4MTc3OTYsIm5iZiI6MTUyNTgxNzc5NiwiZXhwIjoxNTI1ODE5NTk2LCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.YwAXG-GlEv8Y3hJr-RdpnDDLDYEMAPcQX2gymRzJJXGjoJsinuCigYSJlhVY0PKrsTPrfR3o6l5GYQmlV6tFitI46D0w6VddC9yHDQa5ZgpusMgkAnkysfQyqmw5sSo53vJLtibJVrglNLfzXqAwT_f2ATO7YqVncydpBz03fOg27_juQG0C_IayyamIktVCqi4SSmV1fiZVQ-pETOeIekiNlsqVqrjDxcQTEfQkaPkYGOXj8GZN0CKZ8G0b0Kd1J_qIaIzXSbjZ4J2n60z3C-PsRSz-IqOL5-KBqylYwdlLDPPQzRvdF4Q4MNX0wknDYa9EeOJ5ifV371g06MWRsBGoakYAln-J98ZVkUMGUMSBjdpJRym9wLA2ZPbT0Zumc6VJDq3OnCxsLLaIPnaQmd7cAfZY16xg_C6k-u0ZNP6CGF4tt4J9M5dP7PVz9jXSax7zeKAP65H-noGv_8BpbxYr3QUYy9QGaLekN-t_0-xguTSFCFg0qaYeMXLSp9GLiwxJTGrO6mOnqYn0B-aL4iX5w1pAVAl9kwyt1QAlPeLtm5ypgcnvzAmXYIkISUEGfPvGE-tt4_EMHjtvaMteBh9aKuZ90focXp67GrfWzU3lj0XlMkZUnfx-AxWp03AbYx5qzrrWdOdIURHlB7UINom9mQekzPKZFRBtz7hAQu8&token_type=Bearer&expires_in=1799
    - Obtains Access token instead of code
    - Security Issues
        - does not require client secret only client ID
    - once it expires you need to request it again

Refreshing Expired Tokens
    - requstfulapi/outh/token
    - {
          "token_type": "Bearer",
          "expires_in": 30,
          "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6Ijk3YzU4NjkwOGIzYjdiYTUwZDdkNWQyMDI4ZDQzZDg5ODg4NDQ3NmE0NjVhYzk0ZjdjYWEwZjdlNDBjMzZkY2NmMjZlY2Q4YjI0MDFiMzE5In0.eyJhdWQiOiI0IiwianRpIjoiOTdjNTg2OTA4YjNiN2JhNTBkN2Q1ZDIwMjhkNDNkODk4ODg0NDc2YTQ2NWFjOTRmN2NhYTBmN2U0MGMzNmRjY2YyNmVjZDhiMjQwMWIzMTkiLCJpYXQiOjE1MjU4MTkyODAsIm5iZiI6MTUyNTgxOTI4MCwiZXhwIjoxNTI1ODE5MzEwLCJzdWIiOiIxIiwic2NvcGVzIjpbXX0.eeihfu-8tEU1OirlWc9pudd12R7CcPOBF3xQrLA7wVSVpVb9_-KtDJu80TkeYMbu4hTF_E7CyJCvH5qk4EaGBiCykWKk4-wOrM_p_mK77GwvOpXPrEs5_yOsAhGJTCHbuKT1dJMMkrovWt4_7ujxVrWHhrIRdAzxiKB8aEnkMkGMWsgcA1fQzsIULqDsnbm5km5ot6K20pg4C4xl3YIG7LwB96uly4fNgQnuylO9kRRhtisf7wg4dccAAlH9pJjkGWeXS5je_BxSxOGTk_C405akbnrRWZPs98NoxSrs9eQKFwYhCtKAkDae5AEaTVq2DUdTHfj4ZWbrKzC1A93-TaMx5v-5m7IywJlnd7gELgiPw0EsjdcseAbdQdlK11-e_21iUeteuOXLzFyucGOpzwCgkGLxfiB6WU2hCxbYACPUkYddlNlPiVwJkbVBHWdbL-R_uhz4QynU8NOfeZPG_QPI0o6UPlzIsvdiHQB0h3xNfzYjYQl5Vlsdsff0QSJ0YscQ6mAWwVdcmXR1s5q1qgIT49TleX-v5fWFrYoS5YlokWROd7ab1M5UOiWfxR2SyFwTIV4xlC2vEoeABSXAsVmz5bueOOCs7UW1FlXOmkopqoGvmDD9jxd5c8RfkCJ8BABzd-rgvz-jvPjEfIMTfhjNCBQ4i4HZRKN3wIPXOTA",
          "refresh_token": "def502005e59b39450d4ce40fc79543f3cb3b2a0bfa08ef6ed9abfbd47d1db078991ce836a25fd7bcf87bc60a79ca8137ceeb685cf684f7c004c4ebe6b0a2864734f4523e374cf4b9438020e84b6b88841be7ef10ba484c9dac162642888fe86f75c25bfca99cb6b28a49033a009d5ac9896ff9fb84aa90305724e52753b6c941e94cae65759311ed423f4df768c8145c3447b1d6bef85080dfe047d7ea6cdccf0d59d237a3093a1e9708ec39107c6cca5f5ba88e09b7df22f0a9840db49afc51bd572636bf628079ae37fc0aa1b6a041aa46a9f2858ab462251752bd3c08e1a7e7c424dd5ea483c594c96fb6e0fc4a56c6937a545bbe6b99951d112a06e233b998a065d38eea16d7fc15ccbd985d464b69412765a1ce9940be60d275ef946ac38001747ddb9c7d89ad0d722a68935da4b7593140f0138f46132e3a8e4720f8bf504169f671ec45058c74bc7e3bc939a77b90ab68c24ed9d949536fb2a4fe7ad69"
      }

Scopes on OAuth2
    - Allows us to state what a client can do
    - Go to the AuthServiceProvider and add the following code
    - Passport::tokensCan([
      			'purchase-product' => 'Create a new transaction for a specific product',
      			'manage-product' => 'Create, read, update, and delete products (CRUD)',
      			'manage-account' => 'Read your account data, id, name, email, if verified, and if
      								admin (cannot read password). Modify your account data (email, and password).
      								 Cannot delete your account',
      			'read-general' => 'Read general information like purchasing categories, purchased products,
      			 					selling products, selling categories, your transactions (purchases and sales)'
      		]);
    - add middlewares scope and scopes to the Kernel.php file
    'scope' => \Laravel\Passport\Http\Middleware\CheckForAnyScope::class,
    'scopes' => \Laravel\Passport\Http\Middleware\CheckScopes::class,


Protecting you controller methods
    - add the auth middleware at the beginning
    - add the middleware using the scope/scopes middleware
    - public function __construct()
          {
              parent::__construct();

              $this->middleware('transform.input:'. ProductTransformer::class)->only(['store', 'update']);
      		  $this->middleware('auth:api');
      		  $this->middleware('scope:manage-product')->except('index');
          }

Requesting token along with scopes
    - request http://restfulapi.test/oauth/token
    - add fields: client_id:7
                  client_secret:Dn5fbyOUbVRJ1qK6FpIDVHOAH6TNsrobTJuJrWfp
                  grant_type:password
                  username:ericka75@example.org
                  password:secret
                  scopes:manage-product
    - check screen shot named: requesting token along with scopes attached

Gates and Policies
    - Policies - run php artisan make:policy 'PolicyName' --model=ModelName
               - you find it in the Policies folder under the app folder
               - register the policy in the AuthServiceProvider:
                  protected $policies = [
                      Buyer::class => BuyerPolicy::class
                  ];
               - apply it in your controller constructor: $this->middleware('can:view,buyer')->only('show');

    - Give admin roles the power to run everything
               - include the following code in all the policies or use a trait:
                    public function before(User $user, $ability)
                 		{
                 			if ($user->isAdmin()){
                 				return true;
                 			}

                 			return false;
                 		}
    - Gates
        /**
         * 'admin-action' -> name of the gate
         * function -> closure with the action that we are going to validate
         */
        Gate::define('admin-action', function(User $user){
            return $user->isAdmin();
        });

    - protected function allowedAdminAction(){
            if (Gate::denies('admin-action')){
                throw new AuthorizationException('This action is unauthorized');
            }
      }

CORS (Cross Origin Scripting) - this allows your api to communicate with different browser clients,
                                especially when using clients bases on Javascript.
   - Testing The CORS
        go to test-cors.org
   - Installing CORS
        composer require barryvdh/laravel-cors
        cofig/app.php
        - register the ServiceProvider
           \Barryvdh\Cors\ServiceProvider::class
        - publish the provider
            php artisan config vendor:publish --provider="Barryvdh\Cors\ServiceProvider"
        - check the file app.php and live it as it is.
        - Register the middleware in the Kernel.php
            'cors' => \Barryvdh\Cors\HandleCors::class
        - add it to the api middleware array [
            'cors'
            .
            .
            .
        ]

Allowing CORS on Error Responses Too - when an error is triggered it happens so early that the CORS middleware is not executed at this point
        - public function render($request, Exception $exception)
              {
          		$response = $this->handleException($request, $exception);

                  app(CorsService::class)->addActualRequestHeaders($response, $request);

          		return $response;
              }